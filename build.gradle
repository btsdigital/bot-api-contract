buildscript {
    dependencies {
        classpath "com.bmuschko:gradle-nexus-plugin:${nexusPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = "kz.btsd"
version = version

repositories {
    jcenter()
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:$ktlintVersion"

    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    api "javax.validation:validation-api:2.0.1.Final"

    api("io.swagger:swagger-annotations:1.5.20")

    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("io.mockk:mockk:${mockkVersion}")
    testImplementation("com.fasterxml.uuid:java-uuid-generator:3.1.5")
    testImplementation("org.assertj:assertj-core:${assertJVersion}")
    testRuntimeOnly("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt", "--disabled_rules=import-ordering"
}

check.dependsOn ktlint

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

def repo = "github.com/btsdigital/bot-api-contract"

if (project.hasProperty("jiraUsername") && project.hasProperty("jiraPass")) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId group
                artifactId 'bot-api-contract'
                version version
                from components.java
                artifact sourceJar
                artifact javadocJar

                pom {

                    description = 'API contract for AITU messenger bots'
                    name = 'AITU bots API contract'
                    url = repo
                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = "https://$repo/blob/master/LICENSE"
                            distribution = 'repo'
                        }
                    }
                    scm {
                        url = "https://$repo"
                        connection = "scm:git:git://$repo\\.git"
                    }
                    developers {
                        developer {
                            name = 'btsd bot platform'
                            organization = "BTSD"
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username jiraUsername
                    password jiraPass
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}
