package kz.btsd.messenger.bot.api.model.command

import io.swagger.annotations.ApiModel
import io.swagger.annotations.ApiModelProperty
import kz.btsd.messenger.bot.api.model.media.InputMedia
import kz.btsd.messenger.bot.api.model.peer.Peer
import kz.btsd.messenger.bot.api.validation.Content
import kz.btsd.messenger.bot.api.validation.InlineCommandTableSize
import kz.btsd.messenger.bot.api.validation.InlineCommandsSize
import kz.btsd.messenger.bot.api.validation.LocalId
import kz.btsd.messenger.bot.api.validation.MediaList
import kz.btsd.messenger.bot.api.validation.TimeUuid
import javax.validation.Valid

@ApiModel(description = "Send message with ability to provide inline and reply buttons", parent = Command::class)
data class SendMessage(
    @ApiModelProperty(
        notes = "Message ID generated by Bot. Can be any string. Bot will receive MessageIdAssigned update with localId - messageId match",
        example = "804d1bbd-901f-470a-b1b8-1859277a7803"
    )
    @get:LocalId
    val localId: String? = null,
    @ApiModelProperty(
        notes = "Peer to send this message to"
    )
    @get:Valid
    val recipient: Peer,
    @ApiModelProperty(
        notes = "Message ID to reply to"
    )
    @get:TimeUuid(attributeName = "replyToMessageId")
    val replyToMessageId: String? = null,
    @ApiModelProperty(notes = "Message text")
    @get:Content
    val content: String,

    @ApiModelProperty(notes = "List of buttons that will be displayed on Messenger UI inside the message")
    @get:Valid
    @get:InlineCommandsSize
    @Deprecated("use inlineCommandRows instead")
    val inlineCommands: List<InlineCommand> = emptyList(),

    @ApiModelProperty(notes = "Table of buttons that will be displayed on Messenger UI inside the message")
    @get:InlineCommandTableSize
    @get:Valid
    val inlineCommandRows: List<List<InlineCommand>> = emptyList(),

    @ApiModelProperty(notes = "Bot Ui State buttons with ReplyKeyboard and QuickButtons")
    @get:Valid
    val uiState: UiState? = null,

    @ApiModelProperty(notes = "List of media")
    @get:MediaList
    val mediaList: List<InputMedia> = emptyList()
) : Command("SendMessage") {
    @get:Valid
    private val flatCommandRows: List<InlineCommand>
        get() = inlineCommandRows.flatten()
}
